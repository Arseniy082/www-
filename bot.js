// === –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ ===
const TelegramBot = require("node-telegram-bot-api");
const express = require("express");

// === ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
const TOKEN = "7562809822:AAH_z4iejnWardESYt6qv9qdiMIuyWcRFfs"; // —Ç–æ–∫–µ–Ω –∏–∑ @BotFather
const ADMIN_IDS = [7923034220, 5874926994]; // ID –∞–¥–º–∏–Ω–æ–≤

const DAY_SUPPORT = "@blockervddnet";   // –¥–Ω–µ–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
const NIGHT_SUPPORT = "@Sh1ncePr1nce";  // –Ω–æ—á–Ω–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä

// === –•—Ä–∞–Ω–∏–ª–∏—â–∞ ===
const deniedUsers = new Map(); // userId -> —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
const formState = new Map();   // userId -> { step, answers }

// === –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ ===
const bot = new TelegramBot(TOKEN, { polling: true });
console.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...");

// === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
const mainMenu = {
  reply_markup: {
    keyboard: [["üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"]],
    resize_keyboard: true
  }
};

// === –ö–æ–º–∞–Ω–¥–∞ /start ===
bot.onText(/\/start/, async (msg) => {
  await bot.sendMessage(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", mainMenu);
});

// === –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ===
bot.on("message", async (msg) => {
  if (msg.text === "üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏") {
    const text = `
üß∞ <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>

üïê –î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞: ${DAY_SUPPORT}
üåô –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞: ${NIGHT_SUPPORT}

–ü–∏—à–∏ –∏–º –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫–ª–∞–Ω–∞ –∏ –∏–≥—Ä—ã üí¨
`;
    await bot.sendMessage(msg.chat.id, text, { parse_mode: "HTML" });
  }
});

// === –í–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã ===
const questions = [
  "1Ô∏è‚É£ –¢–≤–æ–π –Ω–∏–∫ –≤ DDNet:",
  "2Ô∏è‚É£ –¢–≤–æ—è —Ä–æ–ª—å –≤ –∏–≥—Ä–µ (–∫–æ–≥–µ—Ä –∏–ª–∏ –±–ª–æ–∫–µ—Ä):",
  "3Ô∏è‚É£ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∏–≥—Ä–µ (–∫–∞–∫ —á–∞—Å—Ç–æ –∏–≥—Ä–∞–µ—à—å? —Ñ–æ—Ç–æ):",
  "4Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –≤ DDNet (—Ñ–æ—Ç–æ):",
  "5Ô∏è‚É£ –ò–≥—Ä–∞–µ—à—å –ª–∏ —Ç—ã —Å —á–∏—Ç–∞–º–∏? (—á–µ—Å—Ç–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ üòâ):",
  "6Ô∏è‚É£ –ü–æ—á–µ–º—É —Ö–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –∏–º–µ–Ω–Ω–æ –≤ –Ω–∞—à –∫–ª–∞–Ω BKWORLD? üí™:",
  "7Ô∏è‚É£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–∞–µ—à—å (–ü–ö, –Ω–æ—É—Ç –∏ —Ç.–ø.):",
  "8Ô∏è‚É£ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å):"
];

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ===
bot.on("message", async (msg) => {
  const userId = msg.from.id;
  const chatId = msg.chat.id;

  // –°—Ç–∞—Ä—Ç –∞–Ω–∫–µ—Ç—ã
  if (msg.text === "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É") {
    if (deniedUsers.has(userId)) {
      return bot.sendMessage(chatId, "üö´ –¢–µ–±–µ –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–µ–ª—å–∑—è.");
    }

    formState.set(userId, { step: 0, answers: [] });
    await bot.sendMessage(chatId, questions[0]);
    return;
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞–Ω–∫–µ—Ç—É
  const state = formState.get(userId);
  if (!state) return;

  const step = state.step;
  const answers = state.answers;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
  let userResponse = "";
  if (msg.text) {
    userResponse = msg.text;
  } else if (msg.photo) {
    const photoId = msg.photo[msg.photo.length - 1].file_id;
    userResponse = { type: "photo", file_id: photoId };
  } else if (msg.document) {
    userResponse = { type: "document", file_id: msg.document.file_id };
  } else {
    return; // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
  answers.push(userResponse);
  state.step++;

  // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
  if (state.step < questions.length) {
    await bot.sendMessage(chatId, questions[state.step]);
  } else {
    // === –ê–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ ===
    formState.delete(userId);

    const textParts = [];
    const media = [];

    answers.forEach((ans, i) => {
      if (typeof ans === "string") {
        textParts.push(`${questions[i]}\n${ans}`);
      } else if (ans.type === "photo") {
        media.push({ type: "photo", media: ans.file_id, caption: questions[i] });
      } else if (ans.type === "document") {
        media.push({ type: "document", media: ans.file_id, caption: questions[i] });
      }
    });

    const text = `
üìã <b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞!</b>

${textParts.join("\n\n")}
üë§ –û—Ç: @${msg.from.username || "–ë–µ–∑ –Ω–∏–∫–∞"} (ID: ${userId})
`;

    const opts = {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [
            { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: `accept_${userId}` },
            { text: "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data: `deny_${userId}` }
          ]
        ]
      }
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –∞–¥–º–∏–Ω–∞–º
    for (const adminId of ADMIN_IDS) {
      await bot.sendMessage(adminId, text, opts);

      if (media.length > 0) {
        // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –ø–æ –æ–¥–Ω–æ–º—É (—á—Ç–æ–±—ã –Ω–µ —É–ø–∞–ª–æ –ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é)
        for (const m of media) {
          await bot.sendMediaGroup(adminId, [m]);
        }
      }
    }

    await bot.sendMessage(chatId, "‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π —Ä–µ—à–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
  }
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤ ===
bot.on("callback_query", async (query) => {
  try {
    const data = query.data;
    const msg = query.message;

    // --- –ü—Ä–∏–Ω—è—Ç—å ---
    if (data.startsWith("accept_")) {
      const userId = parseInt(data.split("_")[1]);
      await bot.sendMessage(userId, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–±—è –ø—Ä–∏–Ω—è–ª–∏ –≤ –∫–ª–∞–Ω BKWORLD!\n–í—Å—Ç—É–ø–∞–π –≤ —á–∞—Ç: https://t.me/+gpOWA5NeDBFmMDhi");
      await bot.answerCallbackQuery(query.id, { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç!" });
      await bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: msg.chat.id, message_id: msg.message_id });
      return;
    }

    // --- –û—Ç–∫–∞–∑–∞—Ç—å ---
    if (data.startsWith("deny_")) {
      const userId = parseInt(data.split("_")[1]);
      deniedUsers.set(userId, msg.text);
      await bot.sendMessage(userId, "üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–µ–±–µ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏.\n–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–µ–ª—å–∑—è.");
      await bot.answerCallbackQuery(query.id, { text: "‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ" });
      await bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: msg.chat.id, message_id: msg.message_id });
      return;
    }

    // --- –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏–Ω—è—Ç—å ---
    if (data.startsWith("mclick_accept_")) {
      const uid = parseInt(data.split("_")[2]);
      if (deniedUsers.has(uid)) {
        deniedUsers.delete(uid);
        await bot.sendMessage(uid, "üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ–ª–∞ —Ä–µ—à–µ–Ω–∏–µ ‚Äî —Ç—ã –ø—Ä–∏–Ω—è—Ç –≤ –∫–ª–∞–Ω BKWORLD!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! https://t.me/+gpOWA5NeDBFmMDhi");
        await bot.answerCallbackQuery(query.id, { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ" });
        await bot.editMessageText("‚úÖ –ü—Ä–∏–Ω—è—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ!", { chat_id: msg.chat.id, message_id: msg.message_id });
      } else {
        await bot.answerCallbackQuery(query.id, { text: "‚ö†Ô∏è –≠—Ç–∞ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞." });
      }
      return;
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:", err);
  }
});

// === –ö–æ–º–∞–Ω–¥–∞ /mclick (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ===
bot.onText(/\/mclick/, async (msg) => {
  const userId = msg.from.id;

  if (!ADMIN_IDS.includes(userId)) {
    return bot.sendMessage(msg.chat.id, "üö´ –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–Ω–æ–º–æ—á–∏–π –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
  }

  if (deniedUsers.size === 0) {
    return bot.sendMessage(msg.chat.id, "üì≠ –ù–µ—Ç –æ—Ç–∫–∞–∑–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.");
  }

  for (const [uid, formText] of deniedUsers.entries()) {
    const opts = {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [[{ text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data: `mclick_accept_${uid}` }]]
      }
    };
    await bot.sendMessage(msg.chat.id, `üìã <b>–û—Ç–∫–∞–∑–∞–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞:</b>\n\n${formText}`, opts);
  }
});

// === –ö–æ–º–∞–Ω–¥–∞ /myid ===
bot.onText(/\/myid/, async (msg) => {
  const userId = msg.from.id;
  await bot.sendMessage(msg.chat.id, `üÜî –¢–≤–æ–π Telegram ID: <b>${userId}</b>`, { parse_mode: "HTML" });
});

// === –°–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
const app = express();
app.get("/", (req, res) => res.send("ü§ñ –ë–æ—Ç Telegram BKWORLD —Ä–∞–±–æ—Ç–∞–µ—Ç!"));
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
